SimpleVim
VSCode的类似于Vim的扩展，它优先考虑简单性（使用和实现）以及与本机VSCode功能的集成。

一旦你进入插入模式，它将是一个完全香草的VSCode体验：SimpleVim将监听的唯一事件是返回正常模式的Escape键。

运营商
运营商对一系列文本采取行动。在正常模式下，范围由操作员之后键入的OperatorRange指定。在可视模式下，它是视觉选择。

键说明
d删除范围。
c删除范围并进入插入模式。
y Yank范围。
r Yank并删除范围。
s选择范围并进入可视模式。
OperatorRanges
OperatorRanges选择操作员操作的范围。必须通过键入Operator和OperatorRange在Normal模式下使用它们。

键说明
l光标下的字符。
h光标左侧的字符。
k上面的当前行和行。
j下面的当前行和行。
w从光标到下一个单词的开头。
W从光标到下一个单词的开头（包括标点符号）。
b从光标到上一个单词的开头。
B从光标到上一个单词的开头（包括标点符号）。
e从光标到下一个单词的结尾。
E从光标到下一个单词的结尾（包括标点符号）。
在光标下的Word。
iW Word（包括标点符号）在光标下。
aw光标下的字和空格后的。
aW Word（包括标点符号）在光标和空格之后。
f <char> <char>从光标到下一次出现（区分大小写）。
F <char> <char>从光标到上一次出现（区分大小写）。
t <char>从光标到下一次出现（区分大小写）。
T <char>从光标到上一次出现（区分大小写）。
gg从当前行到文档的第一行。
G从当前行到文档的最后一行。
从当前行到下一段的开头。
{从当前行到上一段的开头。
ip当前段落。
ap当前段落和后面的空格。
i <bracket>匹配的<bracket>内。其中<bracket>是引号或开括号字符（任何'“（{[<）。
a <bracket>在匹配的<bracket>之外。其中<bracket>是引号或开括号字符（任何'“（{[<）。
它在XML标签内。
在外部XML标记。
ii缩进级别内。
议案
Motions移动光标，可以在Normal或Visual模式下使用。在可视模式下，它们只移动选择的一侧;另一边停留在您进入可视模式时的位置。

键说明
l性格正确。
h性格离开了。
k排队。
j线下。
w说得对。
W字（包括标点符号）吧。
b Word离开了。
B字（包括标点符号）离开了。
e结束吧。
E字结束（包括标点符号）吧。
f <char> <char>下一个出现（区分大小写）的。
F <char> <char>上一次出现（区分大小写）。
t <char>下一次出现（区分大小写）。
T <char>上一次出现（区分大小写）。
gg文件的第一行。
G文件的最后一行。
下一段。
{上一段。
$行结束。
_行首。
H屏幕顶部。
M屏幕中间。
L屏幕底部。
操作
操作是不遵循定义良好的Operators，OperatorRanges或Motions模式的杂项命令。

键说明
i进入插入模式。
我移动到行首并进入插入模式。
a向右移动一个字符并进入插入模式。
A移至行尾并进入插入模式。
v进入VisualCharacter模式。
V进入VisualLine模式。
退出进入普通模式。
o在下面插入行并进入插入模式。
O在上面插入行并进入插入模式。
p在光标后放入拉出的文本。
P在光标前放置被拉动的文本。
gp选择最后一个p或P动作的结果，然后进入可视模式。
U撤销。
按Ctrl + R重做。
dd删除当前行。
D删除到行尾。
cc删除当前行并进入插入模式。
C删除到行尾并进入插入模式。
yy Yank现行。
Y Yank到了最后一行。
rr Yank当前行并删除它。
R Yank到行尾并删除它。
ss选择当前行。
S选择到行尾。
x删除字符。
zt滚动以使光标位于屏幕顶部。
zz滚动以使光标位于屏幕中间。
zb滚动以使光标位于屏幕底部。
Ctrl + d向下滚动半页。
Ctrl + u向上滚动半页。
Ctrl + f向下滚动整页。
Ctrl + b向上滚动整页。
;向前重复最后的f，F，t或T运动。
，向后重复最后的f，F，t或T运动。

与Vim的差异
SimpleVim优先考虑简单性，并与原生VSCode功能集成，与Vim兼容。如果完整的Vim兼容性对您很重要，请考虑尝试使用其他扩展名。以下是SimpleVim与Vim不同的一些方法。

SimpleVim没有宏。相反，它具有一流的多光标支持，您可以使用它来实现类似的功能。您可以通过VSCode原生的任何方式放置其他游标，包括：Cmd + d，Cmd + Alt + Down或Alt + Click。只需将光标放在您运行宏的任何位置，并实时查看对每个位置的更改。

SimpleVim没有。 （重复）命令。使用多个游标（参见上一个项目符号）。

SimpleVim没有计数。在Vim中，您可以使用数字为命令添加前缀，并且它将多次运行它们。在SimpleVim中不受支持。相反，您可以再次键入命令或使用以更少重复次数完成目标的命令。

SimpleVim让光标在正常模式下超过该行的最后一个字符。防止这种情况会很好，但由于VSCode的选择模型和扩展API，没有好办法。这将需要丑陋的黑客，并将使SimpleVim体验车的其他部分。

SimpleVim没有寄存器。相反，操作符已被修改，因此删除文本不会覆盖您拉出的文本。当您想要同时拉动和删除文本时，添加了一个新的r运算符。

SimpleVim的f和t运动与Vim的运作略有不同。 t和f的行为类似于Vim / command，但是t取一个字符而f占两个字符。或者换句话说，t在普通模式下像Vim一样工作，但在视觉模式下工作的是Vim。而f的行为就像vim-sneak插件。

SimpleVim没有/（搜索）命令。相反，您可以使用f动作或本机VSCode查找。他们之间的大部分用途都在照顾。

SimpleVim没有>（缩进）命令。相反，你可以使用VSCode的Cmd +]。

SimpleVim没有gU（大写）命令。相反，您可以从命令选项板中使用VSCode的Transform to Uppercase。

SimpleVim没有跳转列表（Vim中的Ctrl + o和Ctrl + i）。相反，您可以使用Ctrl +  - 和Ctrl + _来使用VSCode的本机跳转列表。

SimpleVim不支持标记。如果您经常在文件中的两个位置之间来回跳转，则可以使用VSCode的拆分窗口功能，并使用Cmd + 1和Cmd + 2来聚焦它们。如果您只需要跳回到原来的位置，可以使用VSCode的Ctrl +  - 。

设置
y（yank）运算符会临时更改被拉动范围的背景颜色，以明确您正在进行的操作。否则你可能没有意识到你把它弄错了，直到你试图把它放在其他地方。您可以使用simpleVim.yankHighlightBackgroundColor设置更改其使用的背景颜色。

{
    “simpleVim.yankHighlightBackgroundColor”：“＃F8F3AB”
}
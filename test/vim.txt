一 普通模式光标移动
        h	左
        l	右（小写L）
        j	下
        k	上                  
        w	移动到下一个单词词首
        b	移动到上一个单词词首
        e   移动到下一个单词词尾

二 进入插入模式
        i	在当前光标处进行编辑
        I	在行首插入
        A	在行末插入
        a	在光标后插入编辑
        o	在当前行后插入一个新行
        O	在当前行前插入一个新行
        cw	替换从光标所在位置后到一个单词结尾的字符

三 保存文档
        命令行模式下保存文档
        从普通模式输入:进入命令行模式，输入w回车，保存文档。输入:w 文件名可以将文档另存为其他文件名或存到其它路径下

四 退出vim
        命令行模式下退出vim
        从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑

        以下为其它几种退出方式：

        命令	说明
        :q!	强制退出，不保存
        :q	退出
        :wq!	强制保存并退出
        :w <文件路径>	另存为

五 删除文本
        普通模式下删除vim文本信息
        进入普通模式，使用下列命令可以进行文本快速删除：

        命令	说明
        x	删除游标所在的字符
        X	删除游标所在前一个字符
        Delete	同x
        dd	删除整行
        dw	删除一个单词（不适用中文）
        d$或D	删除至行尾
        d^	删除至行首
        dG	删除到文档结尾处
        d1G	删至文档首部
        除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：

        2dd表示一次删除2行

六 vim重复命令
        重复执行上次命令
        在普通模式下.(小数点)表示重复上一次的命令操作

七 游标的快速跳转
    7.1行间跳转
        命令	说明
        nG(n Shift+g)	游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)
        gg	游标移动到到第一行
        G(Shift+g)	到最后一行
        在完成依次跳转后，可以使用 Ctrl+o 快速回到上一次(跳转前)光标所在位置,这个技巧很实用，比如当你在写代码时，忽然想起有个 bug，需要修改，这时候你跳过去改好了，只需要按下 Ctrl+o 就可以回到你之前的位置。

    7.2行内跳转
        普通模式下使用下列命令在行内按照单词为单位进行跳转

        命令	说明
        w	到下一个单词的开头
        e	到当前单词的结尾
        b	到前一个单词的开头
        ge	到前一个单词的结尾
        0或^	到行头
        $	到行尾
        f<字母>	向后搜索<字母>并跳转到第一个匹配的位置(非常实用)
        F<字母>	向前搜索<字母>并跳转到第一个匹配的位置
        t<字母>	向后搜索<字母>并跳转到第一个匹配位置之前的一个字母(不常用)
        T<字母>	向前搜索<字母>并跳转到第一个匹配位置之后的一个字母(不常用)

八 复制粘贴和剪切
    8.1复制及粘贴文本
        普通模式中使用y复制

        普通模式中，yy复制游标所在的整行（3yy表示复制3行）
        普通模式中，y^ 复制至行首，或y0。不含光标所在处字符。
        普通模式中，y$ 复制至行尾。含光标所在处字符。
        普通模式中，yw 复制一个单词。
        普通模式中，y2w 复制两个单词。
        普通模式中，yG 复制至文本末。
        普通模式中，y1G 复制至文本开头。
        普通模式中使用 p 粘贴

        普通模式中，p(小写)代表粘贴至光标后（下）
        普通模式中，P(大写)代表粘贴至光标前（上）

    8.2剪切及粘贴
        其实前面讲得 dd 删除命令就是剪切，你每次 dd 删除文档内容后，便可以使用 p 来粘贴，也这一点可以让我们实现一个很爽快的功能--交换上下行：
        ddp ,就这么简单，即实现了快速交换光标所在行与它下面的行
        dw删除一个单词 ~转换大小写

九 查找替换
    9.1字符的替换及撤销(Undo操作)
        9.1.1替换和撤销(Undo)命令
        替换和Undo命令都是针对普通模式下的操作

        命令	说明
        r+<待替换字母>	将游标所在字母替换为指定字母
        R	连续替换，直到按下Esc
        cc	替换整行，即删除游标所在行，并进入插入模式
        cw	替换一个单词，即删除一个单词，并进入插入模式
        C(大写)	替换游标以后至行末
        ~	反转游标所在字母大小写
        u{n}	撤销一次或n次操作
        U(大写)	撤销当前行的所有修改
        Ctrl+r	redo，即撤销undo的操作

        输入fa 跳转到第一个a字符
        输入r，并且输入b，a字符被b字符替换（实用）
        输入R替换字符，输入新字符串，输入完按ESC回到普通模式（实用）
        输入cc替换整行字符，输入新字符串，输入完按ESC回到普通模式
        输入cw 替换一个英文字(word)，输入完按ESC回到普通模式（实用）
        输入~，翻转游标所在字符的大小写
        输入C 替换至行尾，即游标所在处以后的字都会被替换，输入完按ESC回到普通模式
        输入u 撤销上一次的操作

    9.2 快速缩进
        9.2.1使用命令进行快速调整缩进操作
        这一小节学习如何在vim中进行快速缩进，缩进操作均在普通模式下有效

        打开文件进行编辑

        $ vim protocols
        普通模式下输入15G，跳转到15行
        普通模式下输入>> 整行将向右缩进（使用，用于格式化代码超爽）
        普通模式下输入<< 整行向左回退
        普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数
        9.2.2 shiftwidth命令
        shiftwidth命令是指上一节>>命令产生的缩进（可以简写成sw） 普通模式下输入:进入命令行模式下对shiftwidth值进行设置可以控制缩进和回退的字符数 获取目前的设定值

        :set shiftwidth?
        设置缩进为10个字符

        :set shiftwidth=10
        输入 ESC 回到普通模式，再次尝试 >> 看缩进量是否变化

        9.2.3 调整文本位置
        命令行模式下输入:ce(center)命令使本行内容居中
        :ce

        命令行模式下输入:ri(right)命令使本行文本靠右
        :ri

        命令行模式下输入:le(left)命令使本行内容靠左
        :le

    9.3 查找
        9.3.1快速查找
        普通模式下输入 / 然后键入需要查找的字符串 按回车后就会进行查找。 ？ 与/ 功能相同，只不过 ？ 是向上而 / 是向下查找。 进入查找之后，输入n 和 N 可以继续查找。 n是查找下一个内容,N查找上一个内容。
        9.3.2 快速查找练习
        使用 vim 打开文件进行编辑（搜索高亮需要在配置文件 .vimrc 中设置 set hls ，实验环境中已经设置好了）

        $ vim protocols
        普通模式下输入/icmp然后回车即可查找字符串 icmp
        普通模式下输入n查找下一个 icmp
        普通模式下输入？tcp向上查找字符串 tcp
        普通模式下输入N查找上一个出现的 tcp
        命令行模式下输入 noh 然后回车即可取消搜索
        9.3.3 高级查找
        普通模式下输入\*寻找游标所在处的单词
        普通模式下输入\#同上，但 \# 是向前（上）找，\*则是向后（下）找
        普通模式下输入g\*同\* ，但部分符合该单词即可
        普通模式下输入g\#同\# ，但部分符合该单词即可
        以上查找n,N 的继续查找命令依然可以用

10高级功能入门
    10.1多文件编辑
        10.1.1使用vim编辑多个文件
        编辑多个文件有两种形式，一种是在进入vim前使用的参数就是多个文件。另一种就是进入vim后再编辑其他的文件。 同时创建两个新文件并编辑

        $ vim 1.txt 2.txt
        默认进入1.txt文件的编辑界面

        命令行模式下输入 :n 编辑 2.txt 文件，可以加 ! 即 :n! 强制切换，之前一个文件的输入没有保存，仅仅切换到另一个文件
        命令行模式下输入 :N 编辑 1.txt 文件，可以加 ! 即 :N! 强制切换，之前文件内的输入没有保存，仅仅是切换到另一个文件
        10.1.2 进入vim后打开新文件
        命令行模式下输入:e 3.txt 打开新文件3.txt
        命令行模式下输入:e# 回到前一个文件
        命令行模式下输入:ls可以列出以前编辑过的文档
        命令行模式下输入:b 2.txt（或者编号）可以直接进入文件2.txt编辑
        命令行模式下输入:bd 2.txt（或者编号）可以删除以前编辑过的列表中的文件项目
        命令行模式下输入:e! 4.txt，新打开文件4.txt，放弃正在编辑的文件
        命令行模式下输入:f 显示正在编辑的文件名
        命令行模式下输入:f new.txt，改变正在编辑的文件名字为new.txt
        10.1.3 恢复文件
        由于在线环境的特殊性，请在本机尝试

        如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r进入文档后，输入:ewcover 1.txt来恢复

    10.2可视模式
        10.2.1 可视模式命令简介
        在普通模式下输入 v（小写），进入字符选择模式，就可以移动光标，光标走过的地方就会选取。再次按下v后就会取消选取。
        在普通模式下输入 Shift+v（小写），进入行选择模式，按下V之后就会把整行选取，您可以上下移动光标选更多的行，同样，再按一次 Shift+v 就可以取消选取。
        在普通模式下输入 Ctrl+v（小写），这是区域选择模式，可以进行矩形区域选择，再按一次 Ctrl+v 取消选取。
        在可视模式下输入 d 删除选取区域内容
        在可视模式下输入y复制选取区域内容
        10.2.2 可视模式命令练习
        拷贝练习文件到当前目录

        $ cp /etc/protocols .
        打开练习文件

        $ vim protocols
        在普通模式下9G跳转到第9行,输入Shift+v（小写V），进入可视模式进行行选择，选中5行，按下>>缩进，将5行整体缩进一个shiftwidth
        在普通模式下输入 Ctrl+v（小写V），进入可视模式进行矩形区域选择，选中第一列字符然后x删除整列

    10.3视窗操作
        10.3.1 视窗操作简介
        vim 可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为 vim 的视窗。 打开方法有很多种，例如可以使用在命令行模式下输入 :new 打开一个新的 vim 视窗，并进入视窗编辑一个新文件（普通模式下输入 Ctrl+w也可以），除了 :new 命令，下述列举的多种方法也可以在命令模式或普通模式下打开新的视窗：

        注意：快捷键可能会与浏览器的快捷键冲突，可换为 IE 浏览器进行实验或者在浏览器设置里禁用浏览器快捷键。

        命令行模式下输入:sp 1.txt 打开新的水平分屏视窗来编辑1.txt
        命令行模式下输入:vsp 2.txt 打开新的垂直分屏视窗来编辑2.txt
        普通模式下Ctrl+w s 将当前窗口分割成两个水平的窗口
        普通模式下Ctrl+w v 将当前窗口分割成两个垂直的窗口
        普通模式下Ctrl+w q 即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!
        普通模式下Ctrl+w o 打开一个视窗并且隐藏之前的所有视窗
        普通模式下Ctrl+w j 移至下面视窗
        普通模式下Ctrl+w k 移至上面视窗
        普通模式下Ctrl+w h 移至左边视窗
        普通模式下Ctrl+w l 移至右边视窗
        普通模式下Ctrl+w J 将当前视窗移至下面
        普通模式下Ctrl+w K 将当前视窗移至上面
        普通模式下Ctrl+w H 将当前视窗移至左边
        普通模式下Ctrl+w L 将当前视窗移至右边
        普通模式下Ctrl+w - 减小视窗的高度
        普通模式下Ctrl+w + 增加视窗的高度
        10.3.2 视窗操作练习
        打开练习文件

        $ vim 1.txt
        命令行模式下输入:new 打开一个新的vim视窗
        命令行模式下输入:vsp 2.txt 打开新的横向视窗来编辑2.txt
        命令行模式下输入:vsp 3.txt 打开新的横向视窗来编辑3.txt
        如果使用非chrome浏览器可以使用Ctrl+w进行视窗间的跳转
        分别在不同视窗的命令行模式下输入:q!退出多视窗编辑

    10.4文档加密
        10.4.1 创建加密文档
        $ vim -x file1
        输入您的密码 确认密码 这样在下一次打开时，vim就会要求你输入密码

    10.5 在vim执行外部命令
        在命令行模式中输入!可以执行外部的shell命令

        :!ls 用于显示当前目录的内容
        :!rm FILENAME用于删除名为 FILENAME 的文件
        :w FILENAME可将当前 VIM 中正在编辑的文件另存为 FILENAME 文件

    10.6 帮助系统
        10.6.1 vim中的查看帮助
        普通模式下按F1打开vim自己预设的帮助文档
        命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件
        命令行模式下输入:ver 显示版本及参数

    10.7 功能设定
        10.7.1 vim的功能设定
        可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数），设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。 vim的配置文件~/.vimrc(实验楼环境中配置文件在/etc/vim/vimrc)，可以打开文件进行修改，不过务必小心不要影响vim正常使用

        10.7.2 获取目前的设定
        命令行模式下输入:set或者:se显示所有修改过的配置
        命令行模式下输入:set all 显示所有的设定值
        命令行模式下输入:set option? 显示option的设定值
        命令行模式下输入:set nooption 取消当前设定值
        10.7.3 set功能的说明
        命令行模式下输入:set autoindent(ai) 设置自动缩进
        命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开
        命令行模式下输入:set background=dark或light，设置背景风格
        命令行模式下输入:set backup(bk) 设置自动备份，默认未打开
        命令行模式下输入: set cindent(cin) 设置C语言风格缩进
        更多详细参数请参考vim手册